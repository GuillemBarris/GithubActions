name: TDD Workflow
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
jobs:
  test:
    runs-on: windows-latest  # Use Windows runner
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures the entire repository history is cloned

      - name: Debug workspace
        run: dir  # Use 'dir' on Windows to list files in the repository

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: C:\Users\runneradmin\AppData\Roaming\npm-cache  # Adjust path for Windows
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Navigate to project directory (if needed)
        run: |
          cd GithubActions  # Use this if package.json is in a subfolder
          dir  # Verify the files in the directory

      - name: Install dependencies
        run: |
          cd GithubActions  # Use this if package.json is in a subfolder
          npm install

      - name: Run tests with npm test
        run: |
          cd GithubActions  # Use this if package.json is in a subfolder
          npm test -- --json --outputFile=test-results.json || true

      - name: Check if any new tests have been added
        run: |
          # List new test files added in the last commit
          $NEW_TESTS = git diff --name-only HEAD~1 HEAD | Select-String -Pattern '\.test\.js$|\.spec\.js$'
          if ($NEW_TESTS) {
            Write-Host "New test files detected: $NEW_TESTS"
            $env.NEW_TESTS = $NEW_TESTS -join "`n"  # Set the new test files in the environment variable
          } else {
            Write-Host "No new test files detected."
          }

      - name: Commit new test results if npm test passes
        if: ${{ success() && env.NEW_TESTS != '' }}
        run: |
          # Check if the tests passed by reading the result file
          if (Test-Path test-results.json) {
            $PASSED_TESTS = (Get-Content test-results.json | ConvertFrom-Json).testResults | Where-Object { $_.status -eq 'passed' } | Select-Object -ExpandProperty name
            if ($PASSED_TESTS) {
              Write-Host "PASSED_TESTS<<EOF"
              $PASSED_TESTS | Write-Host
              Write-Host "EOF"
              $env.PASSED_TESTS = $PASSED_TESTS -join "`n"  # Set passed tests in the environment variable
              
              # Commit the new test results
              git config --global user.name "github-actions[bot]"
              git config --global user.email "github-actions@users.noreply.github.com"
              $PASSED_TESTS_COMMIT_MESSAGE = "NEW TESTS PASSED: $env.PASSED_TESTS"
              git commit --allow-empty -m $PASSED_TESTS_COMMIT_MESSAGE
              git push
            }
          }


